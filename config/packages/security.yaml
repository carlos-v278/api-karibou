parameters:
    env(TRUSTED_IPS): '10.0.0.1, 10.0.0.2, 127.0.0.1:9000'
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        ROLE_FULL_GOD: [ ROLE_OWNER_CREATE,ROLE_OWNER_EDIT, ROLE_SYNDIC_CREATE,ROLE_SYNDIC_EDIT,ROLE_USER]
        ROLE_FULL_SYNDIC: [ ROLE_SYNDIC_EDIT,ROLE_OWNER_EDIT,ROLE_OWNER_CREATE,ROLE_USER]
        ROLE_FULL_OWNER: [ ROLE_OWNER_EDIT,ROLE_USER,ROLE_TENANT_CREATE ]
        ROLE_FULL_TENANT: [ ROLE_TENANT_EDIT,ROLE_USER]
        ROLE_USER: ROLE_USER



    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            json_login:
                check_path: app_login
                username_path: email
                password_path: password
            stateless: true
            access_token:
                token_handler: App\Security\ApiTokenHandler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    #- { path: ^/api/users, roles: ROLE_USER, method: [GET, PUT, DELETE,POST] }
    # - { path: ^/profile, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
